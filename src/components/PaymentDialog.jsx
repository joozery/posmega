import React, { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, CreditCard, QrCode, Loader2, DollarSign } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/use-toast';
import { useStripe } from '@stripe/react-stripe-js';
import { toDataURL } from 'qrcode';
import promptpayPayload from 'promptpay-qr';
import { settingsService } from '@/services/settingsService';

const PaymentDialog = ({ isOpen, onClose, onConfirm, total, cart, customer, discount }) => {
  const { toast } = useToast();
  const stripe = useStripe();
  const [view, setView] = useState('options'); // 'options', 'promptpay', 'stripe_loading'
  const [promptPayQR, setPromptPayQR] = useState('');
  const [settings, setSettings] = useState({
    payment: {
      cashEnabled: 'true',
      stripeEnabled: 'false',
      promptpayEnabled: 'false',
      defaultPaymentMethod: 'cash',
      promptpayId: '',
      stripePriceId: ''
    }
  });
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (isOpen) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö localStorage ‡∏Å‡πà‡∏≠‡∏ô
      const savedSettings = localStorage.getItem('pos_settings');
      if (savedSettings) {
        try {
          const parsed = JSON.parse(savedSettings);
          if (parsed.payment) {
            console.log('üì± PaymentDialog - Found settings in localStorage:', parsed);
            setSettings(parsed);
          }
        } catch (e) {
          console.error('‚ùå PaymentDialog - Error parsing localStorage settings:', e);
        }
      }
      
      // ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å API
      loadSettings();
      setView('options');
      setPromptPayQR('');
    }
  }, [isOpen]);

  const loadSettings = async () => {
    try {
      setLoading(true);
      console.log('üîÑ PaymentDialog - Loading payment settings from API...');
      
      const response = await settingsService.getAllSettings();
      console.log('üì• PaymentDialog - API response:', response);
      
      if (!response) {
        throw new Error('No response from settings API');
      }
      
      const apiSettings = response.settings || {};
      console.log('üîß PaymentDialog - Settings from API:', apiSettings);
      console.log('üí≥ PaymentDialog - Payment settings:', apiSettings.payment);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• payment ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (apiSettings.payment && Object.keys(apiSettings.payment).length > 0) {
        console.log('‚úÖ PaymentDialog - Using API settings');
        setSettings(apiSettings);
      } else {
        console.log('‚ö†Ô∏è PaymentDialog - No payment settings from API, using fallback');
        const savedSettings = JSON.parse(localStorage.getItem('pos_settings') || '{}');
        console.log('üì± PaymentDialog - Fallback settings:', savedSettings);
        
        // ‡∏ñ‡πâ‡∏≤ localStorage ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• payment ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ default
        if (!savedSettings.payment) {
          savedSettings.payment = {
            cashEnabled: 'true',
            stripeEnabled: 'false',
            promptpayEnabled: 'false',
            defaultPaymentMethod: 'cash',
            promptpayId: '',
            stripePriceId: ''
          };
        }
        
        setSettings(savedSettings);
      }
      
    } catch (error) {
      console.error('‚ùå PaymentDialog - Error loading payment settings:', error);
      // Fallback to localStorage if API fails
      const savedSettings = JSON.parse(localStorage.getItem('pos_settings') || '{}');
      console.log('üì± PaymentDialog - Using fallback settings due to error:', savedSettings);
      setSettings(savedSettings);
    } finally {
      setLoading(false);
      console.log('‚úÖ PaymentDialog - Settings loading completed');
    }
  };

  const handleGeneratePromptPayQR = useCallback(async () => {
    const promptpayId = settings?.payment?.promptpayId;
    if (!promptpayId || promptpayId.trim() === '') {
      toast({ title: '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PromptPay', description: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå PromptPay ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô', variant: 'destructive' });
      return;
    }
    const payload = promptpayPayload(promptpayId, { amount: total });
    try {
      const qrDataUrl = await toDataURL(payload);
      setPromptPayQR(qrDataUrl);
      setView('promptpay');
    } catch (err) {
      console.error(err);
      toast({ title: '‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', description: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PromptPay QR Code', variant: 'destructive' });
    }
  }, [settings, total, toast]);

  const handleStripeCheckout = useCallback(async () => {
    if (!stripe) {
      toast({ title: "Stripe ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°", description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Stripe key ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô", variant: "destructive" });
      return;
    }
    const priceId = settings?.payment?.stripePriceId;
    if (!priceId || priceId.trim() === '') {
      toast({ title: "Stripe Price ID ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ", description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Price ID ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô", variant: "destructive" });
      return;
    }

    setView('stripe_loading');

    localStorage.setItem('pending_checkout_cart', JSON.stringify(cart));
    localStorage.setItem('pending_checkout_customer', JSON.stringify(customer));
    localStorage.setItem('pending_checkout_discount', JSON.stringify(discount || 0));


    const { error } = await stripe.redirectToCheckout({
      lineItems: [{ price: priceId, quantity: Math.round(total) }], // Stripe expects integer cents
      mode: 'payment',
      successUrl: `${window.location.origin}/pos?stripe_session=success`,
      cancelUrl: `${window.location.origin}/pos?stripe_session=cancel`,
    });

    if (error) {
      console.error("Stripe Error:", error);
      toast({ title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö Stripe", description: error.message, variant: "destructive" });
      localStorage.removeItem('pending_checkout_cart');
      localStorage.removeItem('pending_checkout_customer');
      localStorage.removeItem('pending_checkout_discount');
      setView('options');
    } else {
      // If no error, the user will be redirected to Stripe
      // The actual payment confirmation will be handled in POS.jsx when they return
      handleStripePayment();
    }
  }, [stripe, settings, cart, customer, total, discount, toast]);

  const handleCashPayment = () => {
    onConfirm('cash');
    toast({ title: "‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î", description: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  };
  
  const handlePromptPayConfirmation = () => {
    onConfirm('promptpay');
    toast({ title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", description: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≤‡∏ô PromptPay QR ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß` });
  };

  const handleStripePayment = () => {
    onConfirm('card');
    toast({ title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", description: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß` });
  };

  const renderContent = () => {
    switch (view) {
      case 'promptpay':
        return (
          <div className="text-center p-6 flex flex-col items-center">
            <h3 className="text-lg font-semibold mb-4">‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
            {promptPayQR ? <img src={promptPayQR} alt="PromptPay QR Code" className="w-56 h-56 mx-auto rounded-lg border p-2" /> : <Loader2 className="w-16 h-16 animate-spin text-blue-500" />}
            <p className="font-bold text-2xl text-blue-600 mt-4">‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞: ‡∏ø{total.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</p>
            <p className="text-sm text-gray-500 mt-2">‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</p>
            <div className="w-full space-y-2 mt-6">
                <Button onClick={handlePromptPayConfirmation} className="w-full" size="lg">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</Button>
                <Button variant="outline" onClick={() => setView('options')} className="w-full">‡∏Å‡∏•‡∏±‡∏ö</Button>
            </div>
          </div>
        );
       case 'stripe_loading':
        return (
            <div className="text-center p-12 flex flex-col items-center justify-center">
                <Loader2 className="w-16 h-16 animate-spin text-blue-500" />
                <p className="mt-4 text-lg font-medium text-gray-700">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô...</p>
            </div>
        );
      case 'options':
      default:
        return (
          <div className="p-6 space-y-4">
            {loading ? (
              <div className="text-center py-8">
                <Loader2 className="w-8 h-8 animate-spin text-blue-600 mx-auto mb-2" />
                <p className="text-sm text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô...</p>
              </div>
            ) : !settings || !settings.payment ? (
              <div className="text-center py-8 text-red-600">
                <p className="font-medium">‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ</p>
                <p className="text-sm mt-1">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
                <Button 
                  variant="outline" 
                  className="mt-3" 
                  onClick={loadSettings}
                >
                  ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                </Button>
              </div>
            ) : (
              <>
                {/* ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î */}
                {(settings.payment?.cashEnabled === 'true' || settings.payment?.cashEnabled === '1') && (
                  <Button 
                    size="lg" 
                    variant={(settings.payment?.defaultPaymentMethod === 'cash' || settings.payment?.defaultPaymentMethod === '1') ? "default" : "outline"} 
                    className="w-full flex justify-start items-center p-6" 
                    onClick={handleCashPayment}
                  >
                    <DollarSign className="w-6 h-6 mr-4" />
                    <div>
                      <p className="font-semibold text-left">‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î</p>
                      <p className="font-normal text-sm text-left">‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î</p>
                    </div>
                  </Button>
                )}

                {/* ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï (Stripe) */}
                {(settings.payment?.stripeEnabled === 'true' || settings.payment?.stripeEnabled === '1') && (
                  <Button 
                    size="lg" 
                    variant={(settings.payment?.defaultPaymentMethod === 'stripe' || settings.payment?.defaultPaymentMethod === '2') ? "default" : "outline"} 
                    className="w-full flex justify-start items-center p-6" 
                    onClick={handleStripeCheckout} 
                    disabled={!stripe}
                  >
                    <CreditCard className="w-6 h-6 mr-4" />
                    <div>
                      <p className="font-semibold text-left">‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï (Stripe)</p>
                      <p className="font-normal text-sm text-left">‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏ö‡∏¥‡∏ï</p>
                    </div>
                  </Button>
                )}

                {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ Stripe ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Price ID */}
                {(settings.payment?.stripeEnabled === 'true' || settings.payment?.stripeEnabled === '1') && (!settings.payment?.stripePriceId || settings.payment?.stripePriceId.trim() === '') && (
                  <div className="p-3 bg-orange-50 border border-orange-200 rounded-lg">
                    <p className="text-sm text-orange-700">
                      ‚ö†Ô∏è Stripe ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Price ID
                    </p>
                  </div>
                )}

                {/* PromptPay */}
                {(settings.payment?.promptpayEnabled === 'true' || settings.payment?.promptpayEnabled === '1') && (
                  <Button 
                    size="lg" 
                    variant={(settings.payment?.defaultPaymentMethod === 'promptpay' || settings.payment?.defaultPaymentMethod === '3') ? "default" : "outline"} 
                    className="w-full flex justify-start items-center p-6" 
                    onClick={handleGeneratePromptPayQR}
                  >
                    <QrCode className="w-6 h-6 mr-4" />
                    <div>
                      <p className="font-semibold text-left">‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå QR Code</p>
                      <p className="font-normal text-sm text-left">‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡∏à‡πà‡∏≤‡∏¢</p>
                    </div>
                  </Button>
                )}

                {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ PromptPay ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ID */}
                {(settings.payment?.promptpayEnabled === 'true' || settings.payment?.promptpayEnabled === '1') && (!settings.payment?.promptpayId || settings.payment?.promptpayId.trim() === '') && (
                  <div className="p-3 bg-orange-50 border border-orange-200 rounded-lg">
                    <p className="text-sm text-orange-700">
                      ‚ö†Ô∏è PromptPay ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå PromptPay
                    </p>
                  </div>
                )}

                {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô */}
                {(!settings.payment?.cashEnabled || (settings.payment?.cashEnabled !== 'true' && settings.payment?.cashEnabled !== '1')) &&
                 (!settings.payment?.stripeEnabled || (settings.payment?.stripeEnabled !== 'true' && settings.payment?.stripeEnabled !== '1')) &&
                 (!settings.payment?.promptpayEnabled || (settings.payment?.promptpayEnabled !== 'true' && settings.payment?.promptpayEnabled !== '1')) && (
                  <div className="text-center py-8 text-orange-600">
                    <p className="font-medium">‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
                    <p className="text-sm mt-1">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</p>
                  </div>
                )}


              </>
            )}
          </div>
        );
    }
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="absolute inset-0 bg-black bg-opacity-60"
            onClick={onClose}
          />
          <motion.div
            initial={{ opacity: 0, scale: 0.9, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: 20 }}
            className="relative bg-white rounded-xl shadow-xl w-full max-w-sm mx-4"
          >
            <div className="flex items-center justify-between p-4 border-b">
              <h2 className="text-xl font-semibold text-gray-900">
                ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
              </h2>
              <Button variant="ghost" size="icon" onClick={onClose}>
                <X className="w-5 h-5" />
              </Button>
            </div>
            {renderContent()}
          </motion.div>
        </div>
      )}
    </AnimatePresence>
  );
};

export default PaymentDialog;